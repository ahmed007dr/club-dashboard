import os ,django
# Set up Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()


from django.db import IntegrityError
from django.utils import timezone
from datetime import timedelta, datetime
import random
from faker import Faker
from core.models import Club
from accounts.models import User
from members.models import Member
from subscriptions.models import SubscriptionType, Subscription
from tickets.models import Ticket
from receipts.models import Receipt, AutoCorrectionLog
from attendance.models import Attendance, EntryLog
from staff.models import Shift
from invites.models import FreeInvite
from finance.models import ExpenseCategory, Expense, IncomeSource, Income


fake = Faker()

def create_dummy_data(
    num_clubs=2,
    num_users=5,
    num_members=10,
    num_subscription_types=3,
    num_subscriptions=10,
    num_tickets=5,
    num_receipts=5,
    num_attendances=10,
    num_entry_logs=10,
    num_shifts=5,
    num_free_invites=5,
    num_expense_categories=3,
    num_expenses=5,
    num_income_sources=3,
    num_incomes=5
):
    try:
        # Create Clubs
        clubs = []
        for _ in range(num_clubs):
            club = Club.objects.create(
                name=fake.company(),
                location=fake.address().replace('\n', ', '),
                created_at=timezone.now()
            )
            clubs.append(club)

        # Create Users (with different roles including owner)
        roles = ['owner', 'admin', 'reception', 'accountant', 'coach']
        users = []
        for _ in range(num_users):
            username = fake.user_name()[:15]  # Ensure username is not too long
            try:
                user = User.objects.create_user(
                    username=username,
                    email=fake.email(),
                    password='password123',
                    club=random.choice(clubs),
                    role=random.choice(roles),
                    first_name=fake.first_name(),
                    last_name=fake.last_name()
                )
                users.append(user)
            except IntegrityError:
                continue  # Skip if username/email is not unique

        # Create Members
        members = []
        for _ in range(num_members):
            try:
                created_at = fake.date_time_this_year(tzinfo=timezone.get_current_timezone())
                member = Member.objects.create(
                    club=random.choice(clubs),
                    name=fake.name(),
                    # membership_number is auto-generated by save() method
                    national_id=fake.unique.numerify(text='##############'),
                    birth_date=fake.date_of_birth(minimum_age=18, maximum_age=70),
                    phone=fake.phone_number()[:20],
                    created_at=created_at,
                    referred_by=None
                )
                members.append(member)
            except (IntegrityError, ValueError) as e:
                print(f"Skipping member creation: {str(e)}")
                continue

        # Update some members with referrals
        for member in random.sample(members, min(3, len(members))):
            possible_referrers = [m for m in members if m != member]
            if possible_referrers:
                member.referred_by = random.choice(possible_referrers)
                member.save()

        # Create Subscription Types
        subscription_types = []
        for name, duration, price, gym, pool, classes in [
            ('Basic', 30, 100.00, True, False, False),
            ('Premium', 90, 250.00, True, True, False),
            ('Elite', 180, 450.00, True, True, True),
        ]:
            sub_type = SubscriptionType.objects.create(
                name=name,
                duration_days=duration,
                price=price,
                includes_gym=gym,
                includes_pool=pool,
                includes_classes=classes,
                is_active=True
            )
            subscription_types.append(sub_type)

        # Create Subscriptions
        subscriptions = []
        for _ in range(num_subscriptions):
            member = random.choice(members)
            sub_type = random.choice(subscription_types)
            start_date = fake.date_this_year()
            end_date = start_date + timedelta(days=sub_type.duration_days)
            try:
                subscription = Subscription.objects.create(
                    club=member.club,
                    member=member,
                    type=sub_type,
                    start_date=start_date,
                    end_date=end_date,
                    paid_amount=round(sub_type.price * random.uniform(0.8, 1.0), 2),
                    remaining_amount=round(sub_type.price * random.uniform(0.0, 0.2), 2),
                    attendance_days=random.randint(0, 30)
                )
                subscriptions.append(subscription)
            except IntegrityError:
                continue

        # Create Attendances
        for _ in range(num_attendances):
            subscription = random.choice(subscriptions)
            try:
                Attendance.objects.create(
                    subscription=subscription,
                    attendance_date=fake.date_between(
                        start_date=subscription.start_date,
                        end_date=min(subscription.end_date, timezone.now().date())
                    )
                )
            except IntegrityError:
                continue

        # Create Tickets
        for _ in range(num_tickets):
            try:
                Ticket.objects.create(
                    club=random.choice(clubs),
                    buyer_name=fake.name(),
                    ticket_type=random.choice(['day_pass', 'session']),
                    price=round(random.uniform(20.00, 100.00), 2),
                    used=fake.boolean(),
                    used_by=random.choice(members) if fake.boolean() else None,
                    issue_date=fake.date_this_year()
                )
            except IntegrityError:
                continue

        # Create Receipts
        for _ in range(num_receipts):
            subscription = random.choice(subscriptions) if fake.boolean() else None
            try:
                receipt = Receipt.objects.create(
                    club=subscription.club if subscription else random.choice(clubs),
                    member=subscription.member if subscription else random.choice(members),
                    subscription=subscription,
                    amount=round(random.uniform(50.00, 500.00), 2),
                    payment_method=random.choice(['cash', 'visa', 'bank']),
                    note=fake.sentence(),
                    issued_by=random.choice(users)
                )
                # Note: The post_save signal will create the Income record automatically
            except IntegrityError:
                continue

        # Create Entry Logs
        for _ in range(num_entry_logs):
            try:
                EntryLog.objects.create(
                    club=random.choice(clubs),
                    member=random.choice(members),
                    approved_by=random.choice(users),
                    related_subscription=random.choice(subscriptions) if fake.boolean() else None
                )
            except IntegrityError:
                continue

        # Create Shifts
        for _ in range(num_shifts):
            date = fake.date_this_month()
            start_time = fake.time_object()
            end_time = (datetime.combine(date, start_time) +
                       timedelta(hours=random.randint(4, 8))).time()
            try:
                Shift.objects.create(
                    club=random.choice(clubs),
                    staff=random.choice(users),
                    date=date,
                    shift_start=start_time,
                    shift_end=end_time,
                    approved_by=random.choice(users) if fake.boolean() else None
                )
            except IntegrityError:
                continue

        # Create Free Invites
        for _ in range(num_free_invites):
            try:
                FreeInvite.objects.create(
                    club=random.choice(clubs),
                    guest_name=fake.name(),
                    phone=fake.phone_number()[:20],
                    date=fake.date_this_month(),
                    status=random.choice(['pending', 'used']),
                    invited_by=random.choice(members) if fake.boolean() else None,
                    handled_by=random.choice(users) if fake.boolean() else None
                )
            except IntegrityError:
                continue

        # Create Expense Categories
        expense_categories = []
        for _ in range(num_expense_categories):
            try:
                category = ExpenseCategory.objects.create(
                    club=random.choice(clubs),
                    name=fake.word().capitalize(),
                    description=fake.sentence()
                )
                expense_categories.append(category)
            except IntegrityError:
                continue

        # Create Expenses
        for _ in range(num_expenses):
            try:
                Expense.objects.create(
                    club=random.choice(clubs),
                    category=random.choice(expense_categories),
                    amount=round(random.uniform(50.00, 1000.00), 2),
                    description=fake.sentence(),
                    date=fake.date_this_year(),
                    paid_by=random.choice(users),
                    invoice_number=fake.unique.bothify(text='INV-#####')
                )
            except IntegrityError:
                continue

        # Create Income Sources
        income_sources = []
        income_source_choices = [
            'Renewal', 'Subscription', 'ticket_sales', 'Sponsorships', 'Events'
        ]
        for _ in range(num_income_sources):
            try:
                source = IncomeSource.objects.create(
                    club=random.choice(clubs),
                    name=random.choice(income_source_choices),
                    description=fake.sentence()
                )
                income_sources.append(source)
            except IntegrityError:
                continue

        # Create Incomes (in addition to those created by Receipt signal)
        for _ in range(num_incomes):
            receipt = random.choice(Receipt.objects.all()) if fake.boolean() else None
            try:
                Income.objects.create(
                    club=receipt.club if receipt else random.choice(clubs),
                    source=random.choice(income_sources),
                    amount=round(random.uniform(50.00, 1000.00), 2),
                    description=fake.sentence(),
                    date=fake.date_this_year(),
                    received_by=random.choice(users),
                    related_receipt=receipt
                )
            except IntegrityError:
                continue

        # Create AutoCorrectionLogs
        for _ in range(min(3, len(subscriptions))):
            member = random.choice(members)
            old_sub = random.choice(subscriptions)
            new_sub = random.choice([s for s in subscriptions if s != old_sub])
            try:
                AutoCorrectionLog.objects.create(
                    member=member,
                    old_subscription=old_sub,
                    new_subscription=new_sub,
                    note=fake.sentence()
                )
            except IntegrityError:
                continue

        print(f"Dummy data created successfully! Generated {len(clubs)} clubs, {len(users)} users, {len(members)} members, and more.")

    except Exception as e:
        print(f"Error creating dummy data: {str(e)}")

if __name__ == "__main__":
    create_dummy_data()